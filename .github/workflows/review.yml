name: Auto-Reviewer

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  auto-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Review Changes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get list of changed files
          CHANGED_FILES=$(gh pr diff ${{ github.event.number }} --name-only)
          MERGE_COMMIT_SHA=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pulls/${{ github.event.number }} | jq -r ".merge_commit_sha")
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files found. Exiting."
            exit 0
          fi

          # Fetch JSON data for changed files
          FILES_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/pulls/${{ github.event.number }}/files)

          echo "Changed files: $CHANGED_FILES"

          # Loop through each changed file
          for file in $CHANGED_FILES; do
            echo "Processing file: $file"

            # Extract patch for the file
            PATCH=$(echo "$FILES_JSON" | jq -r ".[] | select(.filename == \"$file\") | .patch")
            if [ -z "$PATCH" ]; then
              echo "No patch found for $file."
              continue
            fi

            echo "Patch for $file:"
            echo "$PATCH"

            # Fetch existing comments
            EXISTING_COMMENTS=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }}/comments)

            # Parse the patch for changed lines
            while IFS= read -r diff_header; do
              # Ensure to capture only lines starting with `@@`
              if [[ $diff_header =~ ^@@ ]]; then
                # Extract start and end line numbers from the diff header (e.g. @@ -10,6 +10,7 @@)
                START_LINE=$(echo "$diff_header" | grep -oP '\+\d+' | head -n 1 | tr -d '+')
                END_LINE=$(echo "$diff_header" | grep -oP '\+\d+' | tail -n 1 | tr -d '+')

                if [ -z "$START_LINE" ] || [ -z "$END_LINE" ]; then
                  continue
                fi

                echo "Processing lines from $START_LINE to $END_LINE in $file"

                # Check if there's an existing comment for this range
                EXISTING_COMMENT_ID=$(echo "$EXISTING_COMMENTS" | jq -r --arg path "$file" --argjson start "$START_LINE" --argjson end "$END_LINE" \
                  '.[] | select(.path == $path and .line >= $start and .line <= $end) | .id')

                if [ -n "$EXISTING_COMMENT_ID" ]; then
                  # Update existing comment
                  echo "Updating existing comment ID: $EXISTING_COMMENT_ID"
                  gh api \
                    --method PATCH \
                    -H "Accept: application/vnd.github+json" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    repos/${{ github.repository }}/pulls/comments/$EXISTING_COMMENT_ID \
                    -f "body=Resolved review comment for $file from lines $START_LINE to $END_LINE"
                else
                  # Add a new review comment for the entire range
                  echo "Adding new comment for the range $START_LINE to $END_LINE in $file"
                  gh api \
                    --method POST \
                    -H "Accept: application/vnd.github+json" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    repos/${{ github.repository }}/pulls/${{ github.event.number }}/comments \
                    -f "body=Review comment for $file from lines $START_LINE to $END_LINE" \
                    -f "commit_id=${{ github.event.pull_request.head.sha }}" \
                    -F "line=$START_LINE" \
                    -f "side=RIGHT" \
                    -f "path=$file"
                fi
              fi
            done <<< "$PATCH"
